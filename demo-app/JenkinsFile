pipeline {
    agent {
        docker { 
            image 'abhishekf5/maven-abhishek-docker-agent:v1' // use this image
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
            // purpose of additional argument [args]: enable Docker-in-Docker (DinD) functionality. 
            // By mounting the Docker socket from the host into the container, you allow the Docker CLI inside the container to communicate with the Docker daemon on the host machine. 
            // This means you can run Docker commands inside the container, and those commands will be executed by the host's Docker daemon.
        }
    }
    stages {
        stage('Checkout') {
            steps {
                sh 'echo "Already done before"'
            }
            // we don't need to checkout the GitHub repo as the Jenkins file is in the repo and we pointed to this repo via pipeline script from SCM (git) while configuring. 
            // So it will anyway clone the repo to get the JenkinsFile. So we don't need to clone it again.
        }
        stage('Build and Test') {
            steps {
                    dir('demo-app') {  // Change to the directory containing pom.xml
                        sh 'mvn clean install'
                        // .jar file in "demo-app/target" directory will be generated as artifact named such as "spring-boot-web.jar"
                    }
                }
        }
        stage('Static code analysis using SonarQube') {
            environment {
                PUBLIC_IP = credentials('public-ip')
                SONAR_URL = "${PUBLIC_IP}:9000" 
                // as SonarQube runs on port 9000 by default
            }
            steps {
                    sh 'ls -ltr' # for debugging
                // here Jenkins will look for credentials saved by the user with id "sonarqube-cred" and save as the value of SONAR_AUTH_TOKEN
                withCredentials([string(credentialsId: 'sonarqube-cred', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh 'mvn clean install sonar:sonar -Dsonar.host.url=http://${SONAR_URL}:9000'
                }
            }
        }
        stage('Build and push DockerImage') {
            environment {
                DOCKER_IMAGE = "bandhan99/ci-cd-jenkins:${BUILD_NUMBER}"
                REGISTRY_CREDENTIALS = credentials('docker-cred')
                // uses the credentials saved with id "docker-cred" in DockerHub
            }
            steps {
                script { 
                    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }
        stage('Update Deployment File in GitHub') {
            environment {
                GIT_REPO_NAME = "Jenkins-CI-CD-Project"
                GIT_USER_NAME = "bandhan-majumder"
            }
            steps {
                // here Jenkins will look for credentials saved by the user with id "github" and save as the value of GITHUB_TOKEN
                withCredentials([string(credentialsId: 'github-id', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config user.email "bandhanmajumder16@gmail.com"
                        git config user.name "Bandhan Majumder"
                        BUILD_NUMBER=${BUILD_NUMBER}
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" demo-app-manifests/deployment.yml
                        git add demo-app-manifests/deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }
}
